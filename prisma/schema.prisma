// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id         Int      @id @default(autoincrement())
  username   String
  password   String
  name       String
  created_at DateTime @default(dbgenerated("now()")) @db.Timestamp()
  updated_at DateTime @default(dbgenerated("now()")) @updatedAt @db.Timestamp()
}

model Categories {
  id               Int                @id @default(autoincrement())
  name             String
  slug             String
  Product_Category Product_Category[]
  created_at       DateTime           @default(dbgenerated("now()")) @db.Timestamp()
  updated_at       DateTime           @default(dbgenerated("now()")) @updatedAt @db.Timestamp()
}

model Product_Category {
  product     Products   @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id  Int
  category    Categories @relation(fields: [category_id], references: [id], onDelete: Cascade)
  category_id Int

  @@id(fields: [product_id, category_id])
}

model Products {
  id                Int                @id @default(autoincrement())
  name              String
  slug              String
  description       String?            @db.Text
  price             Float
  promotional_price Float
  sales_count       Int
  Categories        Product_Category[]
  Product_Images    Product_Images[]
  Sale_Items        Sale_Items[]
  Product_Reviews   Product_Reviews[]
  created_at        DateTime           @default(dbgenerated("now()")) @db.Timestamp()
  updated_at        DateTime           @default(dbgenerated("now()")) @updatedAt @db.Timestamp()
}

model Product_Reviews {
  id          Int       @id @default(autoincrement())
  product     Products  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id  Int
  customer    Customers @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  customer_id Int
  rating      Int
  review      String
  created_at  DateTime  @default(dbgenerated("now()")) @db.Timestamp()
  updated_at  DateTime  @default(dbgenerated("now()")) @updatedAt @db.Timestamp()
}

model Product_Images {
  id         Int      @id @default(autoincrement())
  product    Products @relation(fields: [product_id], references: [id], onDelete: Cascade)
  product_id Int
  image_path String
  image_name String
  created_at DateTime @default(dbgenerated("now()")) @db.Timestamp()
  updated_at DateTime @default(dbgenerated("now()")) @updatedAt @db.Timestamp()
}

model Sale_Items {
  id          Int       @id @default(autoincrement())
  product     Products? @relation(fields: [product_id], references: [id], onDelete: SetNull)
  product_id  Int?
  quantity    Int
  unit_price  Float
  total_price Float
  created_at  DateTime  @default(dbgenerated("now()")) @db.Timestamp()
  updated_at  DateTime  @default(dbgenerated("now()")) @updatedAt @db.Timestamp()
}

model Sales {
  id          Int        @id @default(autoincrement())
  customer_id Int?
  total_items Int
  total_price Float
  Customers   Customers? @relation(fields: [customer_id], references: [id], onDelete: SetNull)
  created_at  DateTime   @default(dbgenerated("now()")) @db.Timestamp()
  updated_at  DateTime   @default(dbgenerated("now()")) @updatedAt @db.Timestamp()
}

model Customers {
  id              Int               @id @default(autoincrement())
  name            String
  email           String
  password        String
  Sales           Sales[]
  Product_Reviews Product_Reviews[]
  created_at      DateTime          @default(dbgenerated("now()")) @db.Timestamp()
  updated_at      DateTime          @default(dbgenerated("now()")) @updatedAt @db.Timestamp()
}
